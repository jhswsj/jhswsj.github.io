<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[test3]]></title>
    <url>%2F2018%2F06%2F10%2Ftest3%2F</url>
    <content type="text"><![CDATA[1$ ls]]></content>
      <categories>
        <category>test</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo deploy 发布文章时github用户名报错]]></title>
    <url>%2F2018%2F06%2F10%2Fhexo-deploy-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E6%97%B6github%E7%94%A8%E6%88%B7%E5%90%8D%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[因为不懂html，博主纠结了好长时间到底用什么博客来发布文章，想过blogspot.wordpress。由于研究hexo时间还比较长，对这个略擅长些。另外一个问题时比较喜欢使用command line和vim来编辑文章，所以想象还是用免费的github发布文章更适合 ###今天出现在使用的时候出现这样一个问题，提交 1$ hexo d 的时候发现，提交的地址和账号不一样，下面是解决方法 1.系统macos.2.cmd+space键.3.输入keychain access,选择login+左下方的password,搜索github,找到相应的记录，删除就好了。]]></content>
      <categories>
        <category>日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[test2]]></title>
    <url>%2F2018%2F03%2F09%2F2018-03-09-test2%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Linux系统安装kali linux软件包]]></title>
    <url>%2F2018%2F02%2F07%2F2018-02-07-untitled-1517984876714%2F</url>
    <content type="text"><![CDATA[kali linux不用介绍了，hacker系统，要用起来需要适应的过程，重要的是以下方法的可选择性1234$ apt-get install git$ git clone https://github.com/LionSec/katoolin.git &amp;&amp; cp katoolin/katoolin.py /usr/bin/katoolin$ chmod +x /usr/bin/katoolin$ katoolin]]></content>
  </entry>
  <entry>
    <title><![CDATA[记IOS 10.3.2越狱的一次经验]]></title>
    <url>%2F2018%2F02%2F02%2F2018-02-02-test%2F</url>
    <content type="text"><![CDATA[最近对metasploit笔记感兴趣因为没有笔记本，就搜了下有没有IOS版本的metasploit,谷歌了下必须要越狱，就再谷歌了下10.3.2的越狱方法GitHub地址：https://github.com/Sticktron/g0blin 方法如下1.macOS下载Impactor;2.下载g0blin越狱ipa;3.拖动g0blin ipa到impactor，按照提示输入Apple ID和密码;4.手机端点开g0blin;5.jailbreak;6.完成。 装metasploit继续向下看1.添加源 http://noahlittle.github.io;2.搜索metaspoit;]]></content>
  </entry>
  <entry>
    <title><![CDATA[LFS搭建笔记]]></title>
    <url>%2F2018%2F02%2F02%2F2018-02-02-untitled-1516237921587%2F</url>
    <content type="text"><![CDATA[1.本篇文章详述LFS环境的搭建过程本机环境：ubuntu 16.04 X86_64 (virtualbox)LFS 8.1写这篇文章的目的在于，LFS搭建的过程实在是有点长，不断的tar -xvf | cd | configure | make | make install,一次搭建完成大概需要一天的时间，所以想把过程通过脚本来进行完成。当然，这样做对新手很不友好，出现错误不好排除，但这不是本篇文章的目的 2.下面是具体操作过程2.1虚拟机添加硬盘添加一块硬盘，一路默认就行了，大小选10G 2.2 确认硬盘状态开机，打开disk程序，确认下硬盘是否添加成功，例如，我添加的硬盘叫做sdb 2.3 测试系统环境version-check.sh 1$ bash version-check.sh 查看报错，我的提示缺少m4 gawk bison texinfo, /bin/sh not point to /bin/dash解决方法 1234$ sudo apt update$ sudo apt upgrade$ sudo apt install m4 bison gawk texinfo$ ln -s /bin/bash /bin/sh 2.4 创建LFS系统环境，挂载硬盘1$ bash lfs_0_create_lfs_environment.sh 2.5 下载软件包1234$ wget http://www.linuxfromscratch.org/lfs/downloads/stable/wget-list$ wget http://www.linuxfromscratch.org/lfs/downloads/stable/md5sums$ wget --input-file=wget-list --continue --directory-prefix=$LFS/sources$ wget --input-file=md5sums --continue --directory-prefix=$LFS/sources 更好的方法是用UGET进行下载，然后拷贝所有包到/mnt/lfs/sources 2.6 创建lfs账户1$ bash lfs_1_after_pak_down_passLFS.sh]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo博客自动备份]]></title>
    <url>%2F2018%2F02%2F02%2F2018-02-02-untitled-1517553361841%2F</url>
    <content type="text"><![CDATA[实现hexo博客发布后自动备份到github之前介绍过使用github实现多终端部署博客到服务器，地址在这里：https://www.jhswsj.com/2017/12/31/untitled-1514707533949/这样的好处是换了电脑还是可以继续更新博客，防止博客换台电脑就不能编辑了。但是缺点很明显，每次更新需要手动备份，在google里找到一些利用第三方仓库来自动备份的方法，看教程看到头疼，好麻烦今天介绍自动本地自动备份到解决上述难题 原理利用nodejs到时间监听机制 deployAfter 实现1.前提将Hexo加入Git仓库并与Github远程仓库绑定，见上面的🔗教程 2.安装shelljs1$ npm install --save shelljs 如报错，permission denied,权限不够，换成sudo npm install –save shelljs 3.自动备份脚本在hexo根目录的scripts文件夹下创建一个js文件，如没有scripts文件夹就新建一个1$ vim auto_backup.js 写入一下内容1234567891011121314151617181920212223242526272829303132333435require('shelljs/global');try &#123; hexo.on('deployAfter', function() &#123;//当deploy完成后执行备份 run(); &#125;);&#125; catch (e) &#123; console.log("产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：" + e.toString());&#125;function run() &#123; if (!which('git')) &#123; echo('Sorry, this script requires git'); exit(1); &#125; else &#123; echo("======================Auto Backup Begin==========================="); cd('D:/hexo'); //此处修改为Hexo根目录路径 if (exec('git add --all').code !== 0) &#123; echo('Error: Git add failed'); exit(1); &#125; if (exec('git commit -am "Form auto backup script\'s commit"').code !== 0) &#123; echo('Error: Git commit failed'); exit(1); &#125; if (exec('git push origin master').code !== 0) &#123; echo('Error: Git push failed'); exit(1); &#125; echo("==================Auto Backup Complete============================") &#125;&#125; 注意脚本里面的文件路径修改成你的博客源目录的绝对路径本文转的这位同学https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[google cloud ssh login]]></title>
    <url>%2F2018%2F02%2F02%2F2018-02-02-untitled-1517543001033%2F</url>
    <content type="text"><![CDATA[在google cloud compute engine VM的浏览器SSH页面上打开浏览器SSH目的是有时候需要一些操作，或者说你想方便一点，不想一直打开平台再开SSH 1$ sudo su 修改ssh配置文件/etc/ssh/sshd_config1$ vim /etc/ssh/sshd_config 找到PermitRootLogin和PasswordAuthentication;方法是 /permitrootlogin1234$ PermitRootLogin yes //default no$ StrictModes yes$ PasswordAuthentication yes //default no 重启SSH服务1$ /etc/init.d/ssh restart 为root用户设置密码1$ passwd root 最后装下逼，假设你在其他人的机器上，想秀一下华丽的操作，展示下你也是个小hacker，就sudo apt update吧！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用dathttpd发布P2P静态网站]]></title>
    <url>%2F2018%2F01%2F09%2F2018-01-09-%E4%BD%BF%E7%94%A8dathttpd%E5%8F%91%E5%B8%83P2P%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[这篇文章主要介绍利用dathttpd来发布个人的到静态博客 最近P2P的概念非常流行，博主本身对P2P网络也非常感兴趣，随着网络的发展，中心化的网站已经成为网络的累赘，另外各种服务对科技公司的要求越来越高，然后最近国内爆出泄露隐私、监控的几条新闻，基本涉及了国内的全部大型互联网公司。 有关P2P的概念就不多说了，感兴趣的可以自行谷歌、百度，或者关注博主的博客也可以，不过我不是专业人士，只能简单的介绍一下啦,作者的环境是，本地环境macOS 服务器环境centos 7 .类unix系统都差不多，windows系统请自行百度下载相应的软件进行搭建，下面介绍发布过程 1 利用hexo发布静态博客搭建静态博客有多种方法，如hugo 纸小墨 等，自行百度 hexo的搭建依赖nodejs 1.1 安装hexo1.到这里下载nodejs download 下载好软件包后直接点击安装，推荐使用最新版本 如果显示无法安装第三方软件包，请使用终端解锁，命令如下： 1$ sudo spctl --master-disable 2.安装hexo 安装前确保系统内有git，没有到话： 1$ brew install git hexo安装 1$ npm install -g hexo-cli 如果报错，请查看错误信心，出现包含root | administrator的关键字信息，请使用sudo进行安装 1.2 建立博客选择一个文件夹，比如我在桌面上新建一个文件夹，命名hexo_blog终端命令如下： 123456$ cd ~/User/$user/Desktop$ mkdir hexo_blog #创建本地目录$ hexo init #初始化博客$ hexo s #hexo server的缩写，启动本地服务，此时可以在浏览器里打开localhost:4000 来查看网站的样子$ hexo g #生成静态网页，可以发现在本地生成了一个public文件夹，就说网站所在地址$ hexo d # deploy,发布的意思 2 利用BeakerBrowser发布网站到P2P网络步骤如下： 1.打开Beaker菜单 -&gt; New Site -&gt; 写好title -&gt; create site 2.打开Library -&gt; 在左上角选择你的文件夹 -&gt; 点开share右侧下啦菜单 -&gt; change folder -&gt; Publish 3.网站地址点击share就出来了 类似下面 1dat://3fbc2591d8f34dc3245bc7c8e682b778d9c06be31d819d4a44e541c3434d2b79 复制粘贴到Beaker里就能看到你的网站了现在网站正常了，但一旦你的客户端机器关机，该网站就打不开了，第二这个地址hash看着也有点膈应，所以我们可以利用dathttpd来让你的网站一直保持在线，并且把网址改成正常的域名地址来访问 3 利用dathttpd发布1.打开服务器，输入一下命令 123$ sudo yum update$ sudo yum install libtool m4 automake libcap2-bin build-essentials #安装依赖包$ npm install -g dathttpd #安装dathttpd 2.编辑配置文件 12345678910111213$ vim ~/.dathttpd.ymlports: http: 80 #我的设置在9999,因为服务器80端口被nginx占用了 https: 443 metric: 8089directory: ~/.dathttpdletsencrypt: #加密，会自动跳转https email: 'aa@bb.com' agreeTos: truesites: tfwall.tk: #我写的是dat.tfwall.tk url: dat://3fbc2591d8f34dc3245bc7c8e682b778d9c06be31d819d4a44e541c3434d2b79 datonly: false 配置段不要用tab键，直接用空格，听说会出问题，未测试 正常这样就可以访问了，请用DNS进行转发顶级域名到服务器IP即可正常访问 3.我的机房是多服务器单IP，因此采用nginx转发配置如下： 12345678910111213141516171819202122232425262728$ vim /etc/nginx/conf.d/reserve-proxy.confserver&#123; listen 80; server_name tfwall.tk; location /&#123; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8888; #proxy_pass http://tfwall.tk; &#125; access_log /var/log/nginx/tfwall_access.log;&#125;server&#123; listen 80; server_name dat.tfwall.tk; location /&#123; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:9999; #proxy_pass http://tfwall.tk; &#125; access_log /var/log/nginx/tfwall_access.log;&#125; 重点在第二个server字段 4.配置好后，启动dathttpd吧 1$ dathttpd 打开正常浏览器访问tfwall.tk来看看或者打开dat.tfwall.tk看你的配置或者在beakerbrowser浏览器里打开 1dat://3fbc2591d8f34dc3245bc7c8e682b778d9c06be31d819d4a44e541c3434d2b79]]></content>
  </entry>
  <entry>
    <title><![CDATA[终端走代理]]></title>
    <url>%2F2018%2F01%2F04%2F2018-01-04-untitled-1515056543457%2F</url>
    <content type="text"><![CDATA[方法1 临时启用假设你的代理服务器端口为。127.0.0.1:1086在终端中运行如下命令1$ export http_proxy=http://proxyAddress:port 如ss-libev1$ export ALL_PROXY=socks5://127.0.0.1:18086 方法2 写入SHELL文件永久启用直接在 .bashrc或者 .zshrc里添加如下内容1$ export http_proxy=&quot;http://localhost:port&quot; 其他代理模式参照临时端口命令]]></content>
  </entry>
  <entry>
    <title><![CDATA[macOS vim配置]]></title>
    <url>%2F2018%2F01%2F03%2F2018-01-03-untitled-1514964213209%2F</url>
    <content type="text"><![CDATA[Default content桌面操作系统上使用编辑器写代码是非常方便的，跨平台的软件也很多，找到一个适合的虽然很简单，但是有时候还是要pay a little money，作为喜欢开源的我来说，还是喜欢一些开源跨平台的软件还有个问题就是很多时候我们在操作服务器的时候面对的是命令行，所以熟悉vim还是一个必须要有度过程至于喜欢装逼的我，一直喜欢操作命令行，即使现在用黑苹果作为主操作系统，还是喜欢用终端和vi m,毕竟现在的SSD容量都很小，安装那么多软件对容量大要求实在太大本篇主要记录自己对MAC VIM配置 1.更新vim默认的vim版本是7.3，最新版本是8.0,可以通过$ vim –version来查看123$ git clone https://github.com/vim/vim.git$ cd /path$ make &amp;&amp; make install 如何安装查看README_mac.txt当然可以测试 $ brew install vim 看看是什么版本 1.vim基础配置 创建当前用户vim配置文件 1$ vim ~/.vimrc 配置文件如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899 &quot; 显示行号set number&quot; 显示标尺set ruler&quot; 历史纪录set history=1000&quot; 输入的命令显示出来，看的清楚些set showcmd&quot; 状态行显示的内容set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\&quot;%d/%m/%y\ -\ %H:%M\&quot;)&#125;&quot; 启动显示状态行1，总是显示状态行2set laststatus=2&quot; 语法高亮显示syntax onset fileencodings=utf-8,gb2312,gbk,cp936,latin-1set fileencoding=utf-8set termencoding=utf-8set fileformat=unixset encoding=utf-8&quot; 配色方案colorscheme desert&quot; 指定配色方案是256色set t_Co=256set wildmenu&quot; 去掉有关vi一致性模式，避免以前版本的一些bug和局限，解决backspace不能使用的问题set nocompatibleset backspace=indent,eol,startset backspace=2&quot; 启用自动对齐功能，把上一行的对齐格式应用到下一行set autoindent&quot; 依据上面的格式，智能的选择对齐方式，对于类似C语言编写很有用处set smartindent&quot; vim禁用自动备份set nobackupset nowritebackupset noswapfile&quot; 用空格代替tabset expandtab&quot; 设置显示制表符的空格字符个数,改进tab缩进值，默认为8，现改为4set tabstop=4&quot; 统一缩进为4，方便在开启了et后使用退格(backspace)键，每次退格将删除X个空格set softtabstop=4&quot; 设定自动缩进为4个字符，程序中自动缩进所使用的空白长度set shiftwidth=4&quot; 设置帮助文件为中文(需要安装vimcdoc文档)set helplang=cn&quot; 显示匹配的括号set showmatch&quot; 文件缩进及tab个数au FileType html,python,vim,javascript setl shiftwidth=4au FileType html,python,vim,javascript setl tabstop=4au FileType java,php setl shiftwidth=4au FileType java,php setl tabstop=4&quot; 高亮搜索的字符串set hlsearch&quot; 检测文件的类型filetype onfiletype plugin onfiletype indent on&quot; C风格缩进set cindentset completeopt=longest,menu&quot; 功能设置&quot; 去掉输入错误提示声音set noeb&quot; 自动保存set autowrite&quot; 突出显示当前行 set cursorline&quot; 突出显示当前列set cursorcolumn&quot;设置光标样式为竖线vertical bar&quot; Change cursor shape between insert and normal mode in iTerm2.app&quot;if $TERM_PROGRAM =~ &quot;iTerm&quot;let &amp;t_SI = &quot;\&lt;Esc&gt;]50;CursorShape=1\x7&quot; &quot; Vertical bar in insert modelet &amp;t_EI = &quot;\&lt;Esc&gt;]50;CursorShape=0\x7&quot; &quot; Block in normal mode&quot;endif&quot; 共享剪贴板set clipboard+=unnamed&quot; 文件被改动时自动载入set autoread&quot; 顶部底部保持3行距离set scrolloff=3 3.安装Vundle插件1$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 在.vimrc 中添加配置1234567filetype offset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()Plugin &apos;VundleVim/Vundle.vim&apos;Plugin &apos;你的插件&apos;call vundle#end()filetype plugin indent on 4.安装以下插件12345678&quot; let Vundle manage Vundle, requiredPlugin &apos;VundleVim/Vundle.vim&apos;&quot; Plugin &apos;tpope/vim-surround&apos;&quot; Plugin &apos;scrooloose/nerdtree&apos;Plugin &apos;Lokaltog/vim-powerline&apos;Plugin &apos;valloric/youcompleteme&apos;Plugin &apos;yggdroot/indentline&apos;Plugin &apos;jiangmiao/auto-pairs&apos; 5.插件相关设置12345678910111213141516&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;plugin configuration&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;NERDTree&quot;F2开启和关闭树&quot;&quot;map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;&quot;let NERDTreeChDirMode=1&quot;&quot;显示书签&quot;&quot;let NERDTreeShowBookmarks=1&quot;设置忽略文件类型&quot;&quot;let NERDTreeIgnore=[&apos;\~$&apos;, &apos;\.pyc$&apos;, &apos;\.swp$&apos;]&quot;&quot;窗口大小&quot;&quot;let NERDTreeWinSize=25&quot;indentLine&quot;缩进指示线&quot;let g:indentLine_char=&apos;|&apos;let g:indentLine_enabled=1 6.这其中的插件YouCompleteMe插件要单独安装12345678$ git clone https://github.com/Valloric/YouCompleteMe.git$ brew install cmakelinux#### 下载 （在 `～/.vim/bundle` 目录下）$ git clone --recursive [https://github.com/Valloric/YouCompleteMe.git](https://github.com/Valloric/YouCompleteMe.git)#### 检查完整性（在 `～/.vim/bundle/YouCompleteMe` 目录下）$ git submodule update --init --recursive 这里似乎要把cmake link起来1$ brew link cmake 如果报错，看报错，我的是1$ sudo chown -R $(whoami):admin /usr/local/share/man 切换到YouCompleteMe文件夹中执行1$ ./install.py --all 这里想添加什么自己github吧 以下是.vimrc里的YouCompleteMe配置123456789101112131415161718192021222324252627282930313233&quot; 自动补全配置set completeopt=longest,menu &quot;让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)autocmd InsertLeave * if pumvisible() == 0|pclose|endif &quot;离开插入模式后自动关闭预览窗口inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot; &quot;回车即选中当前项&quot;上下左右键的行为 会显示其他信息inoremap &lt;expr&gt; &lt;Down&gt; pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;Down&gt;&quot;inoremap &lt;expr&gt; &lt;Up&gt; pumvisible() ? &quot;\&lt;C-p&gt;&quot; : &quot;\&lt;Up&gt;&quot;inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? &quot;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot; : &quot;\&lt;PageDown&gt;&quot;inoremap &lt;expr&gt; &lt;PageUp&gt; pumvisible() ? &quot;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot; : &quot;\&lt;PageUp&gt;&quot;&quot;youcompleteme 默认tab s-tab 和自动补全冲突&quot;let g:ycm_key_list_select_completion=[&apos;&lt;c-n&gt;&apos;]let g:ycm_key_list_select_completion = [&apos;&lt;Down&gt;&apos;]&quot;let g:ycm_key_list_previous_completion=[&apos;&lt;c-p&gt;&apos;]let g:ycm_key_list_previous_completion = [&apos;&lt;Up&gt;&apos;]let g:ycm_confirm_extra_conf=0 &quot;关闭加载.ycm_extra_conf.py提示let g:ycm_collect_identifiers_from_tags_files=1 &quot; 开启 YCM 基于标签引擎let g:ycm_min_num_of_chars_for_completion=2 &quot; 从第2个键入字符就开始罗列匹配项let g:ycm_cache_omnifunc=0 &quot; 禁止缓存匹配项,每次都重新生成匹配项let g:ycm_seed_identifiers_with_syntax=1 &quot; 语法关键字补全nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt; &quot;force recomile with syntastic&quot;nnoremap &lt;leader&gt;lo :lopen&lt;CR&gt; &quot;open locationlist&quot;nnoremap &lt;leader&gt;lc :lclose&lt;CR&gt; &quot;close locationlistinoremap &lt;leader&gt;&lt;leader&gt; &lt;C-x&gt;&lt;C-o&gt;&quot;在注释输入中也能补全let g:ycm_complete_in_comments = 1&quot;在字符串输入中也能补全let g:ycm_complete_in_strings = 1&quot;注释和字符串中的文字也会被收入补全let g:ycm_collect_identifiers_from_comments_and_strings = 0nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt; &quot; 跳转到定义处]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用github实现多终端部署博客到服务器]]></title>
    <url>%2F2017%2F12%2F31%2F2017-12-31-untitled-1514707533949%2F</url>
    <content type="text"><![CDATA[1.A电脑备份博客到github1.在博客目录下的.gitignore，增加/public /.deploy_git2.初始化仓库,切换到本地博客根目录1$ git init 1$ git remote add origin &lt;server&gt; //&lt;server&gt;为远程仓库地址 3.同步远程仓库123$ git add . #添加目录下的所有文件$ git commit -m &quot;更新说明&quot; #提交更新说明$ git push -u origin master [-f] #推送更新到远程仓库 2.B电脑下载远程仓库文件B电脑同样先安装好 node | git | ssh | hexo 并安装好插件1234$ git init$ git remote add origin &lt;server&gt;$ git fetch --all$ git reset --hard origin/master 3.发布博客后同步B电脑发布完博客之后，将博客备份同步到远程仓库123$ git add . #添加目录下的所有文件$ git commit -m &quot;更新说明&quot; #提交更新说明$ git push -u origin master #推送更新到远程仓库 4.平时同步管理123456$ git pull #同步更新 hexo new post &quot;新建文章&quot; #简写形式 hexo n &quot;新建文章&quot; $ hexo clean #清除旧的public文件夹 hexo generate #生成静态文件 简写形式 $ hexo deploy #发布到github上 简写形式 hexo d $ git add . #添加更改文件到缓存区 $ git commit -m &quot;更新说明&quot; #提交到本地仓库 $ git push -u origin master #推送到远程仓库进行备份hey]]></content>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 端口开放]]></title>
    <url>%2F2017%2F12%2F31%2F2017-12-31-test2%2F</url>
    <content type="text"><![CDATA[添加规则1$ iptables -I INPUT -p tcp --dport 80 -j ACCEPT 1$ iptables-save 重启后规则就消失了 持久化iptables12$ apt install iptables-persistent$ service iptables-persistent save]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo 博客部署到CentOS服务器]]></title>
    <url>%2F2017%2F12%2F27%2F2017-12-27-untitled-1514357942242%2F</url>
    <content type="text"><![CDATA[好多东西看似简单，真正要用起来还是不简单，记这次部署博客… 最近想要一个可以写笔记的地方，网上有很多博客地址，为了折腾，准备搭建利用自己的服务器搭建一个静态博客，使得在客户机上写文章，然后发布到服务器上。 初步想法是把博客部署到IPFS上，但是作为一个IPFS的初学者，发布出来的网站CSS样式搞不定，留着以后学习 服务器参数：CentOS 7 1.安装nginx &amp;&amp; git1$ yum -y install nginx git 2.nginx配置1$ vim /etc/nginx/conf.d/default.conf 123456789server &#123; listen 80 default_server; listen [::]:80 default_server; server_name 10.78.90.8 location / &#123; root /usr/share/nginx/html; index index.html index.htm; &#125; 不晓得什么原因，我一换里面的默认文件地址，就报403错误 - - 3.git配置123$ mkdir -p /usr/GitLibrary$ chown -R $USER:$USER /usr/GitLibrary$ chmod -R 755 /usr/GitLibrary git 初始化裸库12$ cd /usr/GitLibrary$ git init --bare hexo.git 创建git钩子（hook）123456$ vim /usr/GitLibrary/hexo.git/hooks/post-receive#!/bin/bashgit --work-tree=/usr/share/nginx/html --git-dir=/usr/GitLibrary/hexo.git checkout -f$ chmod +x /usr/GitLibrary/hexo.git/hooks/post-receive 4.防火墙配置4.1 服务器端口解封12$ sudo firewall-cmd --zone=public --add-port=3000/tcp --permanent$ sudo firewall-cmd --reload 检查防火墙规则 1$ firewall-cmd --list-all 4.2 端口映射 将10.78.90.8:80映射到外网IP:8888 外网80端口已经被占用 5. 此处假定你已经安装好本地的nodejs 部署hexo12$ npm install hexo-cli hexo-server hexo-deployer-git -g$ hexo init ~/workspace/ipfs_website 6. 本地HEXO配置1234567$ vim _config.yml# Deployment### Docs: https://hexo.io/docs/deployment.htmldeploy: //发布对应的github账号type: gitrepo: root@servre_out_IP:/usr/GitLibrary/hexo //用户名@域名或 IP 地址:/data/GitLibrary/hexobranch: master 7. 部署一下，感觉吊吊的1$ hexo g -d 在浏览器上打开博客网址，看看效果。我这个博客还有很多问题没处理好，等我慢慢改进！！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[IPFS+IPNS+个人博客搭建]]></title>
    <url>%2F2017%2F12%2F24%2F2017-12-24-untitled-1514105149894%2F</url>
    <content type="text"><![CDATA[1. 如何在IPFS新增一个文件12$ vim file.txt$ my name is Jacob Chow 1.1 将file.txt添加到ipfs节点12$ ipfs add file.txt$ ipfs cat $file_hash 此时将数据添加到你自己当前的IPFS节点中，但并没有同步到IPFS网络 1.2 同步到IPFS网络1$ ipfs daemon 查看https://ipfs.io/ipfs/file_hash 2. 通过IPFS创建目录存储文件我们可以通过ipfs的相关命令在ipfs的根目录下面创建文件夹，并且将file.txt文件移动或者拷贝到我们创建到文件夹中 **cp不会改变文件到hash,mv会改变hash寻址12345$ ipfs files mkdir /Jacob$ ipfs files cp /ipfs/file_hash /Jacob$ ipfs files ls /Jacob$ ipfs files ls /Jacob/file.txt$ ipfs files read /Jacob/file.txt 3. 如何在IPFS新增一个目录使用ipfs add -r 可以上传一整个目录，如：1$ ipfs add -r public 4. 创建简易到网页发布到IPFS4.1 先在桌面上新建一个site文件夹，然后按照下面到步骤在site文件中建立index.html和style.css文件12345678910111213141516171819$ cd /site$ vim index.html/* &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Hello IPFS!&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot; /&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello IPFS!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; */$ vim style.css h1&#123; color: green&#125; 添加文件夹到IPFS网络1$ ipfs add -r site/ 5. 发布到IPNS1$ ipfs name publish site_hash or peerid 6. 验证1$ ipfs name resolve peerid]]></content>
  </entry>
  <entry>
    <title><![CDATA[ipfs 安装和环境配置]]></title>
    <url>%2F2017%2F12%2F24%2F2017-12-24-untitled-1514103275949%2F</url>
    <content type="text"><![CDATA[1 IPFS 下载&amp;&amp;安装进入ipfs.io网页的Install界面 选择 Download IPFS for your platform下载到本机后，解压12$ tar xvfz go-ipfs.tar.gz$ mv ipfs /usr/local/bin/ipfs 2 创建IPFS节点1$ ipfs init 执行完 ipfs init命令后，会在根目录下生成一个.ipfs的文件夹存储节点数据。.ipfs节点默认存储空间为10G如果你想修改节点默认的存储空间，可打开终端执行以下命令： 12$ export EDITOR=/usr/bin/vim$ ipfs config edit 修改1234&quot;Datastore&quot;:&#123; &quot;StorageMax&quot;:&quot;20GB&quot;, ...&#125; 请注意仔细看看各个栏目的意思，淡然，你也可以修改”Gateway”端口，这样可以避免你的翻墙软件端口与IPFS端口冲突。我的感觉是IPFS在国内支持的并不好，很卡，需要 ## 代理软件 ## 打开！！ 3 查看节点ID1$ ipfs id 4 启动节点服务器1$ ipfs daemon 只有启动服务器，才能把你的内容等发布到IPFS网络中 5 跨域资源共享CORS配置为了后续的开发方便，我们还需要对跨域资源共享惊醒配置，退出服务器 ctrl-c12$ ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods &apos;[&quot;PUT&quot;, &quot;GET&quot;, &quot;POST&quot;, &quot;OPTIONS&quot;]&apos;$ ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin &apos;[&quot;*&quot;]&apos; 此处在原作者那看来的，暂时还不知道什么意思，先留着吧6 验证12$ ipfs daemon$ ipfs cat /ipfs/$SITE_HASH/readme 7 浏览器打开http://localhost:5001/webui 会看到UI界面]]></content>
  </entry>
  <entry>
    <title><![CDATA[折腾服务器]]></title>
    <url>%2F2017%2F12%2F24%2F2017-12-24-untitled-1514099717963%2F</url>
    <content type="text"><![CDATA[1.服务器的安装单位剩余的一台ThinkServer G980服务器，安装CentOS 7系统，因为桌面我习惯用的是Ubuntu的系统，所以为了折腾，在服务器上安装 CentOS 7,因为系统之前安装过 Windowserver 2012，所以Raid之类的没尝试，就跟普通的装机一样，把系统装起来了 1.1.开启ssh服务查看是否安装了相关软件1$ rpm -qa | grep -E &quot;openssh&quot; 显示含有三个软件包，表示已经安装，否则1$ sudo yum install openssh 注册使用服务12$ sudo systemctl enable ssh$ sudo systemctl start sshd.service 如果结果不对，根据提示输入命令开启防火墙的22端口具体防火墙使用可以参照：http://www.cnblogs.com/moxiaoan/p/5683743.html12$ sudo firewall-cmd --zone=public --add-port=22/tcp --permanent$ sudo service firewalld restart 如果是机房有路由的，需要把内网地址、端口迎合到外网、端口2.客户端使用ssh连接服务器这里主要针对的是MAC Linux 客户端，Windows请自行百度2.1 利用ssh-keygen生成RSA密钥对1$ ssh-keygen 生成私钥和公钥，将私钥放在本机电脑常用位置，如我的位置1$ /Users/psy/.ssh/ 2.2 拷贝公钥至服务器我使用的是U盘，挂载U盘1234$ lsblk 查看U盘的位置$ mount /dev/sd* /mnt``` ## 2.3 查看服务器的配置文件 /etc/ssh/sshd_config中记录的认证列表目录 $ #AuthorizedKeysFile .ssh/authorized_keys1## 2.4 将公钥复制到认证列表 $ mkdir ~/.ssh$ chmod 700 .ssh$ cp /mnt/公钥.pub ~/.ssh$ mv 公钥.pub authorized_keys &amp;&amp; chmod 644 authorized_keys1# 3 连接服务器 $ ssh -i /User/psy/.ssh/私钥 root@serverIP -p 22```]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2017%2F11%2F29%2Funtitled-1511923713614%2F</url>
    <content type="text"><![CDATA[#搞了一上午才搞定这个每个平台都不一样 。好蛋疼！]]></content>
  </entry>
</search>
